/*!
 * @file   belThread.h
 * @brief  
 * @author belmayze
 * 
 * Copyright (c) belmayze. All rights reserved.
 */
#pragma once

namespace std { class thread; }

namespace bel {
//-----------------------------------------------------------------------------
class Thread
{
    //-------------------------------------------------------------------------
    // static
    //-------------------------------------------------------------------------
public:
    /*!
     * 理論スレッド数を取得する
     */
    static uint32_t GetNumThreads();

    /*!
     * 実行しているスレッド番号を取得する
     */
    static uint32_t GetThreadIndex();

    //-------------------------------------------------------------------------
public:
    using Callback = std::function<int(const Thread&)>;

    //-------------------------------------------------------------------------
    // ctor / dtor
    //-------------------------------------------------------------------------
public:
    //! コンストラクター
    Thread(const std::string& name, Callback callback);
    //! デストラクター
    ~Thread();

    //-------------------------------------------------------------------------
    // thread
    //-------------------------------------------------------------------------
public:
    /*!
     * スレッドの処理を開始する
     */
    void start();

    /*!
     * 実行するスレッドを制限する
     * @param[in] mask マスク
     */
    void setAffinityMask(uint64_t mask);

    /*!
     * 終了を待機する
     */
    void join();

    //-------------------------------------------------------------------------
private:
    std::unique_ptr<std::thread> mpThread;
    Callback                     mCallback;
    uint64_t                     mAffinityMask = std::numeric_limits<uint64_t>::max(); //!< 実行スレッドマスク
    std::string                  mName;         //!< スレッド名

    //-------------------------------------------------------------------------
    // internal
    //-------------------------------------------------------------------------
private:
    /*!
     * アフィニティマスクをセットする実関数
     */
    void setAffinityMaskImpl_();

    /*!
     * スレッドから呼び出される関数
     */
    void onInvoke_();
};
//-----------------------------------------------------------------------------
}
